/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.javaassignment.UI;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.mycompany.javaassignment.Class.*;
import java.util.*;

/**
 *
 * @author qianc
 */
public class POListUI extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();
    private String[] colname = {"PONo.", "ItemNo", "ItemName", "SupplierID", "Quantity", "UnitPrice", "TotalPrice", "ReceiveDate", "DateRequest", "DateApproved", "UserRequested", "PersonInCharge", "ProgressStatus"};

    PurchaseOrder po = new PurchaseOrder();
    CurrentTime time = new CurrentTime();
    User user = new User() {
    };
    PurchaseRequisition pr = new PurchaseRequisition();
    Inventory inv = new Inventory();

    public POListUI() {
        initComponents();
        model.setColumnIdentifiers(colname);
        tableUI();

        jTextField1.setEditable(false);
        jTextField1.setFocusable(false);
        jTextField2.setEditable(false);
        jTextField2.setFocusable(false);
        jTextField3.setEditable(false);
        jTextField3.setFocusable(false);
        jTextField4.setEditable(false);
        jTextField4.setFocusable(false);
        jTextField5.setEditable(false);
        jTextField5.setFocusable(false);
        jTextField6.setEditable(false);
        jTextField6.setFocusable(false);
        jTextField7.setEditable(false);
        jTextField7.setFocusable(false);
        jTextField8.setEditable(false);
        jTextField8.setFocusable(false);
        jTextField9.setEditable(false);
        jTextField9.setFocusable(false);
        jTextField10.setEditable(false);
        jTextField10.setFocusable(false);
        jTextField11.setEditable(false);
        jTextField11.setFocusable(false);
        jTextField12.setEditable(false);
        jTextField12.setFocusable(false);
        jTextField13.setEditable(false);
        jTextField13.setFocusable(false);

        if (String.valueOf(user.getCurrentUserRole()).equals("FM")) {
            jButtonActivate.setText("APPROVE");
            jButtonCancel.setText("REJECT");
        } else if (String.valueOf(user.getCurrentUserRole()).equals("IM")) {
            jButtonActivate.setVisible(false);
            jButtonCancel.setText("RECEIVED");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        POList = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButtonReset = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonActivate = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButtonBack = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonSearch.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonSearch.setText("SEARCH");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PONo.", "ItemNo.", "ItemName", "SupplierID", "Quantity", "Unit Price", "Total Price", "Estimate Receive Date", "Date Request", "Date Approved", "User Requested", "PersonInCharge", "ProgressStatus" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Date Approved :");
        jLabel12.setToolTipText("");

        POList.setModel(model);
        POList.setColumnSelectionAllowed(true);
        POList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                POListMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(POList);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Progress Status :");
        jLabel13.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("NEXUS SDN BHD POTS");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("User Requested :");
        jLabel14.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("PONo :");
        jLabel1.setToolTipText("");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Person In Charge :");
        jLabel15.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("ItemNo :");
        jLabel5.setToolTipText("");

        jButtonReset.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonReset.setText("RESET");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonCancel.setText("CANCEL");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonActivate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonActivate.setText("ACTIVATE");
        jButtonActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActivateActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Item Name :");
        jLabel6.setToolTipText("");

        jButtonBack.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonBack.setText("BACK");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("SupplierID :");
        jLabel7.setToolTipText("");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Quantity :");
        jLabel8.setToolTipText("");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Unit Price :");
        jLabel9.setToolTipText("");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Total Price :");
        jLabel10.setToolTipText("");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Date Request :");
        jLabel11.setToolTipText("");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Receive Date :");
        jLabel16.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonActivate)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCancel)))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSearch))
                            .addComponent(jButtonBack, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextField1, jTextField10, jTextField11, jTextField12, jTextField13, jTextField2, jTextField3, jTextField4, jTextField5, jTextField6, jTextField7, jTextField8, jTextField9});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonActivate, jButtonCancel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButtonSearch)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCancel)
                            .addComponent(jButtonActivate))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jButtonBack)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel10, jLabel11, jLabel16, jLabel5, jLabel6, jLabel7, jLabel8, jLabel9, jTextField1, jTextField10, jTextField2, jTextField3, jTextField4, jTextField5, jTextField6, jTextField7, jTextField8, jTextField9});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jComboBox1, jTextField14});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        clean();
        tableUI(String.valueOf(jComboBox1.getSelectedItem()), String.valueOf(jTextField14.getText()));
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void POListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_POListMouseReleased
        int row = POList.getSelectedRow();

        String prNo = String.valueOf(model.getValueAt(row, 0));
        String itemNo = String.valueOf(model.getValueAt(row, 1));
        String itemName = String.valueOf(model.getValueAt(row, 2));
        String supplier = String.valueOf(model.getValueAt(row, 3));
        String qty = String.valueOf(model.getValueAt(row, 4));
        String unitPrice = String.valueOf(model.getValueAt(row, 5));
        String totalPrice = String.valueOf(model.getValueAt(row, 6));
        String receivedDate = String.valueOf(model.getValueAt(row, 7));
        String dateRequested = String.valueOf(model.getValueAt(row, 8));
        String dateApproved = String.valueOf(model.getValueAt(row, 9));
        String userRequested = String.valueOf(model.getValueAt(row, 10));
        String pic = String.valueOf(model.getValueAt(row, 11));
        String status = String.valueOf(model.getValueAt(row, 12));

        jTextField1.setText(prNo);
        jTextField2.setText(itemNo);
        jTextField3.setText(itemName);
        jTextField4.setText(supplier);
        jTextField5.setText(qty);
        jTextField6.setText(unitPrice);
        jTextField7.setText(totalPrice);
        jTextField8.setText(receivedDate);
        jTextField9.setText(dateRequested);
        jTextField10.setText(dateApproved);
        jTextField11.setText(userRequested);
        jTextField12.setText(pic);
        jTextField13.setText(status);
    }//GEN-LAST:event_POListMouseReleased

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        clean();
        cleanTF();
        tableUI();
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        if (user.getCurrentUserRole().equals("PM")) {
            setVisible(false);
            new PurchaseManagerUI().setVisible(true);
        } else if (user.getCurrentUserRole().equals("FM")) {
            setVisible(false);
            new FinanceManagerUI().setVisible(true);
        } else if (user.getCurrentUserRole().equals("IM")) {
            setVisible(false);
            new InventoryManagerUI().setVisible(true);
        }
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        int row = -1;
        row = POList.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Data not selected, please select a row.");
        } else {
            String poNo = jTextField1.getText();
            String itemNo = jTextField2.getText();
            String itemName = jTextField3.getText();
            String supplier = jTextField4.getText();
            int qty = Integer.parseInt(jTextField5.getText());
            double unitPrice = Double.parseDouble(jTextField6.getText());
            double totalPrice = Double.parseDouble(jTextField7.getText());
            String receivedDate = jTextField8.getText();
            String dateRequested = jTextField9.getText();
            String dateApproved = jTextField10.getText();
            String userRequested = jTextField11.getText();
            String pic = jTextField12.getText();
            String status = jTextField13.getText();
            String newStatus = "";

            if (String.valueOf(jButtonCancel.getText()).equals("CANCEL") && status.equals("Waiting for FM to Approve PO")) {
                if (poNo.isEmpty() || itemNo.isEmpty() || itemName.isEmpty() || supplier.isEmpty() || qty <= 0 || unitPrice <= 0 || totalPrice <= 0 || receivedDate.isEmpty() || dateRequested.isEmpty() || dateApproved.isEmpty() || userRequested.isEmpty() || pic.isEmpty() || status.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Invalid data.");
                } else {
                    if (JOptionPane.showConfirmDialog(this, "Are you sure to cancel this PO?", "Cancel Confirmation", JOptionPane.YES_NO_OPTION) == 0) {
                        newStatus = "Canceled";
                        po.editPurchaseOrder(poNo, itemNo, itemName, supplier, qty, unitPrice, totalPrice, receivedDate, dateRequested, dateApproved, userRequested, pic, newStatus);
                        pr.updateStatus(poNo.replace("PO-", "PR-"), newStatus);
                        clean();
                        cleanTF();
                        tableUI();
                    }
                }
            } else if (String.valueOf(jButtonCancel.getText()).equals("REJECT") && status.equals("Waiting for FM to Approve PO")) {
                if (poNo.isEmpty() || itemNo.isEmpty() || itemName.isEmpty() || supplier.isEmpty() || qty <= 0 || unitPrice <= 0 || totalPrice <= 0 || receivedDate.isEmpty() || dateRequested.isEmpty() || dateApproved.isEmpty() || userRequested.isEmpty() || pic.isEmpty() || status.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Invalid data.");
                } else {
                    if (JOptionPane.showConfirmDialog(this, "Confirm to reject this PO?", "Reject Confirmation", JOptionPane.YES_NO_OPTION) == 0) {
                        newStatus = "Rejected";
                        po.editPurchaseOrder(poNo, itemNo, itemName, supplier, qty, unitPrice, totalPrice, receivedDate, dateRequested, time.toDateFormat(), userRequested, pic, newStatus);
                        pr.updateStatus(poNo.replace("PO-", "PR-"), newStatus);
                        clean();
                        cleanTF();
                        tableUI();
                    }
                }
            } else if (String.valueOf(jButtonCancel.getText()).equals("RECEIVED") && (status.equals("Approved") || status.equals("Paid/Not-Received"))) {
                if (status.equals("Approved")) {
                    newStatus = "Unpaid/Received";
                } else if (status.equals("Paid/Not-Received")) {
                    newStatus = "Paid/Received";
                }

                if (JOptionPane.showConfirmDialog(this, "Confirm that received stocks for this PO?", "Receive Confirmation", JOptionPane.YES_NO_OPTION) == 0) {
                    inv.addStockQty(poNo, itemNo, itemName, qty, "SA");
                    po.editPurchaseOrder(poNo, itemNo, itemName, supplier, qty, unitPrice, totalPrice, time.toDateFormat(), dateRequested, dateApproved, userRequested, pic, newStatus);
                    pr.updateStatus(poNo.replace("PO-", "PR-"), newStatus);
                    clean();
                    cleanTF();
                    tableUI();
                }
            } else if (String.valueOf(jButtonCancel.getText()).equals("CANCEL") && !status.equals("Waiting for FM to Approve PO")) {
                JOptionPane.showMessageDialog(null, "You cannot cancel this PO.");
            } else if (String.valueOf(jButtonCancel.getText()).equals("REJECT") && !status.equals("Waiting for FM to Approve PO")) {
                JOptionPane.showMessageDialog(null, "You cannot reject this PO.");
            } else {
                JOptionPane.showMessageDialog(null, "Error Updating PO");
            }
        }
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActivateActionPerformed
        int row = -1;
        row = POList.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Data not selected, please select a row.");
        } else {
            String poNo = jTextField1.getText();
            String itemNo = jTextField2.getText();
            String itemName = jTextField3.getText();
            String supplier = jTextField4.getText();
            int qty = Integer.parseInt(jTextField5.getText());
            double unitPrice = Double.parseDouble(jTextField6.getText());
            double totalPrice = Double.parseDouble(jTextField7.getText());
            String receivedDate = jTextField8.getText();
            String dateRequested = jTextField9.getText();
            String dateApproved = jTextField10.getText();
            String userRequested = jTextField11.getText();
            String pic = jTextField12.getText();
            String status = jTextField13.getText();
            String newStatus;

            if (String.valueOf(jButtonActivate.getText()).equals("ACTIVATE") && status.equals("Canceled")) {
                if (poNo.isEmpty() || itemNo.isEmpty() || itemName.isEmpty() || supplier.isEmpty() || qty <= 0 || unitPrice <= 0 || totalPrice <= 0 || receivedDate.isEmpty() || dateRequested.isEmpty() || dateApproved.isEmpty() || userRequested.isEmpty() || pic.isEmpty() || status.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Invalid data.");
                } else {
                    if (JOptionPane.showConfirmDialog(this, "Are you sure to activate this PO,", "Activate Confirmation", JOptionPane.YES_NO_OPTION) == 0) {
                        newStatus = "Waiting for FM to Approve PO";
                        po.editPurchaseOrder(poNo, itemNo, itemName, supplier, qty, unitPrice, totalPrice, receivedDate, dateRequested, dateApproved, userRequested, pic, newStatus);
                        pr.updateStatus(poNo.replace("PO-", "PR-"), newStatus);                        
                        clean();
                        cleanTF();
                        tableUI();
                    }
                }
            } else if (String.valueOf(jButtonActivate.getText()).equals("APPROVE") && status.equals("Waiting for FM to Approve PO")) {
                if (poNo.isEmpty() || itemNo.isEmpty() || itemName.isEmpty() || supplier.isEmpty() || qty <= 0 || unitPrice <= 0 || totalPrice <= 0 || receivedDate.isEmpty() || dateRequested.isEmpty() || dateApproved.isEmpty() || userRequested.isEmpty() || pic.isEmpty() || status.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Invalid data.");
                } else {
                    if (JOptionPane.showConfirmDialog(this, "Confirm to approve this PO,", "Approve Confirmation", JOptionPane.YES_NO_OPTION) == 0) {
                        newStatus = "Approved";
                        po.editPurchaseOrder(poNo, itemNo, itemName, supplier, qty, unitPrice, totalPrice, receivedDate, dateRequested, time.toDateFormat(), userRequested, pic, newStatus);
                        pr.updateStatus(poNo.replace("PO-", "PR-"), newStatus);
                        inv.addStockQty(poNo, itemNo, itemName, qty, "SIP");
                        clean();
                        cleanTF();
                        tableUI();
                    }
                }
            } else if (String.valueOf(jButtonActivate.getText()).equals("ACTIVATE") && !status.equals("Canceled")) {
                JOptionPane.showMessageDialog(null, "You cannot activate this PO.");
            } else if (String.valueOf(jButtonActivate.getText()).equals("APPROVE") && !status.equals("Waiting for FM to Approve PO")) {
                JOptionPane.showMessageDialog(null, "You cannot approve this PO.");
            } else {
                JOptionPane.showMessageDialog(null, "Error updating PO.");
            }
        }
    }//GEN-LAST:event_jButtonActivateActionPerformed

    private void clean() {
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        jTextField14.setText("");
    }

    private void cleanTF() {
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField9.setText("");
        jTextField10.setText("");
        jTextField11.setText("");
        jTextField12.setText("");
        jTextField13.setText("");
        jComboBox1.setSelectedIndex(0);
    }

    private void tableUI() {
        List<PurchaseOrder> poEntries = new PurchaseOrder().poList();

        if (poEntries != null && !poEntries.isEmpty()) {
            for (PurchaseOrder entry : poEntries) {
                model.addRow(new Object[]{
                    entry.getPoNo(),
                    entry.getItemNo(),
                    entry.getItemName(),
                    entry.getSupplier(),
                    entry.getQty(),
                    entry.getUnitPrice(),
                    entry.getTotalPrice(),
                    entry.getReceivedDate(),
                    entry.getDateRequest(),
                    entry.getDateApproved(),
                    entry.getUserRequested(),
                    entry.getPic(),
                    entry.getStatus()
                });
            }
        } else {
            JOptionPane.showMessageDialog(null, "There is no data in purchase_order.txt");
        }
    }

    private void tableUI(String filter, String input) {
        List<PurchaseOrder> poEntries = new PurchaseOrder().poList();
        if (poEntries != null && !poEntries.isEmpty()) {
            boolean matchFound = false;

            for (PurchaseOrder entry : poEntries) {
                switch (filter) {
                    case "PONo.":
                        if (entry.getPoNo().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "ItemNo.":
                        if (entry.getItemNo().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "ItemName":
                        if (entry.getItemName().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "SupplierID":
                        if (String.valueOf(entry.getSupplier()).equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "Quantity":
                        if (String.valueOf(entry.getQty()).equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "Unit Price":
                        if (String.valueOf(entry.getUnitPrice()).equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "Total Price":
                        if (String.valueOf(entry.getTotalPrice()).equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "Estimate Receive Date":
                        if (entry.getReceivedDate().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "Date Request":
                        if (entry.getDateRequest().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "Date Approved":
                        if (entry.getDateApproved().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "User Requested":
                        if (entry.getUserRequested().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "PersonInCharge":
                        if (entry.getPic().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    case "ProgressStatus":
                        if (entry.getStatus().equals(input)) {
                            display(entry, input);
                            matchFound = true;
                        }
                        break;

                    default:
                        JOptionPane.showMessageDialog(null, "Invalid filter provided.");
                        return; // Exit if an invalid filter is provided
                }
            }
            // Show error message if no match is found
            if (!matchFound) {
                JOptionPane.showMessageDialog(null, "No matching " + filter + " found for the input: " + input);
                tableUI();
            }

        } else {
            JOptionPane.showMessageDialog(null, "There is no data in PurchaseOrder.txt");
        }
    }

    private void display(PurchaseOrder entry, String input) {
        model.addRow(new Object[]{
            entry.getPoNo(),
            entry.getItemNo(),
            entry.getItemName(),
            entry.getSupplier(),
            entry.getQty(),
            entry.getUnitPrice(),
            entry.getTotalPrice(),
            entry.getReceivedDate(),
            entry.getDateRequest(),
            entry.getDateApproved(),
            entry.getUserRequested(),
            entry.getPic(),
            entry.getStatus()
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(POListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(POListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(POListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(POListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new POListUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable POList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonActivate;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
